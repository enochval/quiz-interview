{"version":3,"sources":["../../src/controllers/AppController.js"],"names":["startQuizschema","noOfQuestions","Joi","number","required","submitQuizschema","fullName","string","email","phone","answersProvided","array","items","object","keys","questionID","optionSelected","getValidationMessage","errors","details","map","error","message","QUESTIONS_DB","path","join","__dirname","ANSWERS_DB","getData","shuffle","limit","ids","file","fs","readFile","data","questions","JSON","parse","_","take","res","forEach","d","find","o","_id","element","push","computeQuizResult","answerObj","questionObj","correctAns","answer","toLowerCase","percentageScore","parseInt","percentage","Number","isInteger","toFixed","response","noOfCorrectAnswers","storeAnser","json","stringify","writeFile","totalQuizLength","req","status","length","startQuiz","validate","body","abortEarly","value","submitQuiz"],"mappings":"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","file":"AppController.js","sourcesContent":["import _ from 'lodash'\nimport Joi from 'joi'\nimport fs from 'mz/fs'\nimport path from 'path'\n\nconst startQuizschema = {\n    noOfQuestions: Joi.number().required(),\n};\n\nconst submitQuizschema = {\n    fullName: Joi.string().required(),\n    email: Joi.string().email().required(),\n    phone: Joi.number().required(),\n    noOfQuestions: Joi.number().required(),\n    answersProvided: Joi.array().items(Joi.object().keys({\n        questionID: Joi.number().required(), \n        optionSelected: Joi.string().required()\n    })).required(),\n};\n\nconst getValidationMessage = (errors) => {\n    return errors.details.map((error) => error.message)\n}\nconst QUESTIONS_DB = path.join(__dirname, '../database/questions.json')\nconst ANSWERS_DB = path.join(__dirname, '../database/answers.json')\n\nconst getData = async (shuffle = false, limit = false, ids = false, file = QUESTIONS_DB) => {\n    const data = await fs.readFile(file)\n    const questions = JSON.parse(data)\n    if (shuffle && limit) {\n        return _.take(_.shuffle(questions), limit)\n    } else if (limit) {\n        return _.take(questions, limit)\n    } else if (shuffle) {\n        return _.shuffle(questions)\n    } else if (ids) {\n        let res = []\n        ids.forEach(element => {\n            const d = _.find(questions, (o) => o._id == element )\n            res.push(d)\n        })\n        return res\n    } else {\n        return questions\n    }\n}\n\nconst computeQuizResult = (answerObj, questionObj, noOfQuestions) => {\n    let correctAns = 0;\n    answerObj.forEach(element => {\n        const d = _.find(questionObj, (o) => o._id == element.questionID )\n        if (d.answer.toLowerCase() == element.optionSelected.toLowerCase()) {\n            correctAns++\n        }\n    })\n    const percentageScore = (parseInt(correctAns) / parseInt(noOfQuestions)) * 100\n    const percentage = (Number.isInteger(percentageScore)) ? `${percentageScore}%` :\n                        `${percentageScore.toFixed(2)}%`\n    const response = {\n        noOfCorrectAnswers: correctAns,\n        percentageScore: percentage\n    }\n    return response;\n}\n\nconst storeAnser = async (answer) => {\n    const data = await getData(false, false, false, ANSWERS_DB)\n    data.push(answer)\n    const json = JSON.stringify(data)\n    await fs.writeFile(ANSWERS_DB, json)\n}\n\nexport const totalQuizLength = async (req, res) => {\n    const questions = await getData()\n    res.json({\n        status: true,\n        data: questions.length\n    })\n}\n\nexport const startQuiz = async (req, res) => {\n    const {error, value} = Joi.validate(req.body, startQuizschema, { abortEarly: false });\n    if (error) {\n        res.status(422).json(getValidationMessage(error))\n    } else {\n        const { noOfQuestions } = value\n        const questions = await getData(true, noOfQuestions)\n        res.json({\n            status: true,\n            data: questions\n        })\n    }\n}\n\nexport const submitQuiz = async (req, res) => {\n    const {error, value} = Joi.validate(req.body, submitQuizschema, { abortEarly: false });\n    if (error) {\n        res.status(422).json(getValidationMessage(error))\n    } else {\n        const { answersProvided, noOfQuestions, fullName, email, phone } = value\n        const ids = answersProvided.map(answer => {\n            return answer.questionID\n        })\n\n        const questions = await getData(false, false, ids)\n        const { noOfCorrectAnswers, percentageScore } = computeQuizResult(answersProvided, questions, noOfQuestions)\n\n        const answerObj = {\n            fullName,\n            email,\n            phone,\n            answersProvided,\n            noOfCorrectAnswers,\n            percentageScore\n        }\n        await storeAnser(answerObj)\n        res.json({\n            fullName,\n            percentageScore\n        })\n    }\n}"]}